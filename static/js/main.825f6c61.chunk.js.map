{"version":3,"sources":["components/Header.js","helper.js","components/Form.js","components/Summary.js","components/Result.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","header","HeaderText","h1","Header","title","firstUppercase","text","charAt","toUpperCase","slice","Field","div","Label","label","Select","select","InputRadio","input","Button","button","Error","Form","setSummary","setLoading","useState","brand","year","plan","dataForm","setDataForm","error","setError","getFormInfo","event","target","name","value","onSubmit","preventDefault","trim","result","yearDifference","Date","getFullYear","getYearDifference","increase","calculateBrand","planIncrease","getPlanIncrease","parseFloat","toFixed","setTimeout","quotation","Number","data","htmlFor","id","onChange","type","checked","SummaryContainer","Summary","Message","p","QuotationResult","Total","Result","TransitionGroup","component","className","CSSTransition","classNames","key","timeout","enter","exit","Spinner","Container","ContainerForm","App","summary","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.825f6c61.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HeaderContainer = styled.header`\r\n  background-color: #26c6da;\r\n  padding: 10px;\r\n  font-weight: bold;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst HeaderText = styled.h1`\r\n  font-size: 2rem;\r\n  margin: 0;\r\n  font-family: 'Slabo 27px', serif;\r\n  text-align: center;\r\n`;\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <HeaderContainer>\r\n      <HeaderText>{title}</HeaderText>\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","/**\r\n * Obtiene la diferencia de años\r\n * @param {*} year Año seleccionado por el usuario\r\n */\r\nexport function getYearDifference(year) {\r\n  return new Date().getFullYear() - year;\r\n}\r\n\r\n/**\r\n * Calcula el total a pagar según la marca\r\n * @param {*} brand Marca seleccionada por el usuario\r\n */\r\nexport function calculateBrand(brand) {\r\n  let increase;\r\n  switch (brand) {\r\n    case 'american':\r\n      increase = 1.15;\r\n      break;\r\n    case 'european':\r\n      increase = 1.3;\r\n      break;\r\n    case 'asiatic':\r\n      increase = 1.05;\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  return increase;\r\n}\r\n\r\n/**\r\n * Calcula el tipo de seguro\r\n * @param {*} plan Plan seleccionado por el usuario\r\n */\r\nexport function getPlanIncrease(plan) {\r\n  return plan === 'basic' ? 1.2 : 1.5;\r\n}\r\n\r\n/**\r\n * Muestra la primer letra mayuscula\r\n * @param {*} text Texto a modificar.\r\n */\r\nexport function firstUppercase(text) {\r\n  return text.charAt(0).toUpperCase() + text.slice(1);\r\n}\r\n","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport { getYearDifference, calculateBrand, getPlanIncrease } from '../helper';\r\n\r\nconst Field = styled.div`\r\n  display: flex;\r\n  margin-bottom: 1rem;\r\n  align-items: center;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  flex: 0 0 100px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  display: block;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  border: 1px solid #e1e1e1;\r\n  -webkit-appearance: none;\r\n`;\r\n\r\nconst InputRadio = styled.input`\r\n  margin: 0 1rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: #00838f;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  border: none;\r\n  transition: background-color 0.3s ease;\r\n  margin-top: 2rem;\r\n\r\n  &:hover {\r\n    background-color: #26c6da;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Error = styled.div`\r\n  background-color: #de3b3bed;\r\n  color: white;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst Form = ({ setSummary, setLoading }) => {\r\n  const [dataForm, setDataForm] = useState({\r\n    brand: '',\r\n    year: '',\r\n    plan: '',\r\n  });\r\n  // State en caso de error\r\n  const [error, setError] = useState(false);\r\n\r\n  // Extraer los valores del state\r\n  const { brand, year, plan } = dataForm;\r\n\r\n  // Leer los datos del formulario y colocarlos en el state\r\n  const getFormInfo = (event) => {\r\n    setDataForm({\r\n      ...dataForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Cuando el usuario presiona submit\r\n  const quoteInsurance = (event) => {\r\n    event.preventDefault();\r\n\r\n    //Validación de campos\r\n    if (brand.trim() === '' || year.trim() === '' || plan.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n\r\n    // Base inicial de seguro (2000)\r\n    let result = 2000;\r\n\r\n    //Obtener la diferencia de años.\r\n    const yearDifference = getYearDifference(year);\r\n\r\n    //Por cada año hay que restar el 3%\r\n    result -= (yearDifference * 3 * result) / 100;\r\n\r\n    /* Incremento por marca a su valor actual\r\n        Americano 15 %\r\n        Asiatico 5 %\r\n        Europeo 30%\r\n    */\r\n    result = calculateBrand(brand) * result;\r\n\r\n    /* Incremento por plan a su valor actual\r\n        Básico 20 %\r\n        Completo 50 %\r\n    */\r\n    const planIncrease = getPlanIncrease(plan);\r\n    result = parseFloat(planIncrease * result).toFixed(2);\r\n\r\n    setLoading(true);\r\n\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      // Total\r\n      setSummary({\r\n        quotation: Number(result),\r\n        data: dataForm,\r\n      });\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={quoteInsurance}>\r\n      {error ? <Error>All fields are required</Error> : null}\r\n      <Field>\r\n        <Label htmlFor=\"brand\">Brand</Label>\r\n        <Select name=\"brand\" value={brand} id=\"brand\" onChange={getFormInfo}>\r\n          <option value=\"\">-- Select --</option>\r\n          <option value=\"american\">American</option>\r\n          <option value=\"european\">European</option>\r\n          <option value=\"asiatic\">Asiatic</option>\r\n        </Select>\r\n      </Field>\r\n      <Field>\r\n        <Label htmlFor=\"year\">Year</Label>\r\n        <Select name=\"year\" value={year} id=\"year\" onChange={getFormInfo}>\r\n          <option value=\"\">-- Select --</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n          <option value=\"2018\">2018</option>\r\n          <option value=\"2017\">2017</option>\r\n          <option value=\"2016\">2016</option>\r\n          <option value=\"2015\">2015</option>\r\n          <option value=\"2014\">2014</option>\r\n          <option value=\"2013\">2013</option>\r\n          <option value=\"2012\">2012</option>\r\n        </Select>\r\n      </Field>\r\n\r\n      <Field>\r\n        <Label>Plan</Label>\r\n        <InputRadio type=\"radio\" name=\"plan\" id=\"basic\" value=\"basic\" checked={plan === 'basic'} onChange={getFormInfo} />\r\n        <Label htmlFor=\"basic\">Basic</Label>\r\n        <InputRadio type=\"radio\" name=\"plan\" id=\"complete\" value=\"complete\" checked={plan === 'complete'} onChange={getFormInfo} />\r\n        <Label htmlFor=\"complete\">Complete</Label>\r\n      </Field>\r\n\r\n      <Button type=\"submit\">Quote</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  setSummary: PropTypes.func.isRequired,\r\n  setLoading: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { firstUppercase } from '../helper';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SummaryContainer = styled.div`\r\n  padding: 1rem;\r\n  text-align: center;\r\n  background-color: #00838f;\r\n  color: #fff;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst Summary = ({ data }) => {\r\n  const { brand, year, plan } = data;\r\n\r\n  if (brand.trim() === '' || year.trim() === '' || plan.trim() === '') return null;\r\n  return (\r\n    <SummaryContainer>\r\n      <h2> Quote Summary</h2>\r\n      <ul>\r\n        <li>Brand: {firstUppercase(brand)}</li>\r\n        <li>Plan: {firstUppercase(plan)}</li>\r\n        <li>Car Year: {firstUppercase(year)}</li>\r\n      </ul>\r\n    </SummaryContainer>\r\n  );\r\n};\r\n\r\nSummary.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Summary;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = styled.p`\r\n  background-color: rgb(127, 224, 237);\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst QuotationResult = styled.div`\r\n  text-align: center;\r\n  padding: 1.5rem;\r\n  border: 1px solid #26c6da;\r\n  background-color: rgb(127, 224, 237);\r\n  margin-top: 1rem;\r\n  position: relative;\r\n`;\r\n\r\nconst Total = styled.p`\r\n  color: #00838f;\r\n  padding: 1rem;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  margin: 0;\r\n`;\r\n\r\nconst Result = ({ quotation }) => {\r\n  return quotation === 0 ? (\r\n    <Message>Select brand, year and plan.</Message>\r\n  ) : (\r\n    <QuotationResult>\r\n      <TransitionGroup component=\"span\" className=\"resultado\">\r\n        <CSSTransition classNames=\"resultado\" key={quotation} timeout={{ enter: 500, exit: 500 }}>\r\n          <Total>\r\n            Total: $ <span>{quotation}</span>\r\n          </Total>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n    </QuotationResult>\r\n  );\r\n};\r\n\r\nResult.propTypes = {\r\n  quotation: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"sk-cube-grid\">\r\n      <div className=\"sk-cube sk-cube1\"></div>\r\n      <div className=\"sk-cube sk-cube2\"></div>\r\n      <div className=\"sk-cube sk-cube3\"></div>\r\n      <div className=\"sk-cube sk-cube4\"></div>\r\n      <div className=\"sk-cube sk-cube5\"></div>\r\n      <div className=\"sk-cube sk-cube6\"></div>\r\n      <div className=\"sk-cube sk-cube7\"></div>\r\n      <div className=\"sk-cube sk-cube8\"></div>\r\n      <div className=\"sk-cube sk-cube9\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Fragment, useState } from 'react';\r\nimport Header from './components/Header';\r\nimport styled from '@emotion/styled';\r\nimport Form from './components/Form';\r\nimport Summary from './components/Summary';\r\nimport Result from './components/Result';\r\nimport Spinner from './components/Spinner';\r\n\r\nconst Container = styled.div`\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ContainerForm = styled.div`\r\n  background-color: #fff;\r\n  padding: 3rem;\r\n`;\r\n\r\nfunction App() {\r\n  const [summary, setSummary] = useState({\r\n    quotation: 0,\r\n    data: {\r\n      brand: '',\r\n      year: '',\r\n      plan: '',\r\n    },\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { data, quotation } = summary;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Container>\r\n        <Header title=\"Insurance Quote\" />\r\n        <ContainerForm>\r\n          <Form setSummary={setSummary} setLoading={setLoading} />\r\n          {loading ? <Spinner /> : null}\r\n\r\n          <Summary data={data} />\r\n          {!loading ? <Result quotation={quotation} /> : null}\r\n        </ContainerForm>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}